/*! For license information please see 471.c3e2694b.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_nazeeh2000_comp_kit=self.webpackChunk_nazeeh2000_comp_kit||[]).push([[471],{"./node_modules/.pnpm/@noble+curves@1.0.0/node_modules/@noble/curves/esm/secp256k1.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{secp256k1:()=>secp256k1});var _assert=__webpack_require__("./node_modules/.pnpm/@noble+hashes@1.3.0/node_modules/@noble/hashes/esm/_assert.js"),utils=__webpack_require__("./node_modules/.pnpm/@noble+hashes@1.3.0/node_modules/@noble/hashes/esm/utils.js");class SHA2 extends utils.kb{constructor(blockLen,outputLen,padOffset,isLE){super(),this.blockLen=blockLen,this.outputLen=outputLen,this.padOffset=padOffset,this.isLE=isLE,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(blockLen),this.view=(0,utils.GL)(this.buffer)}update(data){_assert.ZP.exists(this);const{view,buffer,blockLen}=this,len=(data=(0,utils.O0)(data)).length;for(let pos=0;pos<len;){const take=Math.min(blockLen-this.pos,len-pos);if(take!==blockLen)buffer.set(data.subarray(pos,pos+take),this.pos),this.pos+=take,pos+=take,this.pos===blockLen&&(this.process(view,0),this.pos=0);else{const dataView=(0,utils.GL)(data);for(;blockLen<=len-pos;pos+=blockLen)this.process(dataView,pos)}}return this.length+=data.length,this.roundClean(),this}digestInto(out){_assert.ZP.exists(this),_assert.ZP.output(out,this),this.finished=!0;const{buffer,view,blockLen,isLE}=this;let{pos}=this;buffer[pos++]=128,this.buffer.subarray(pos).fill(0),this.padOffset>blockLen-pos&&(this.process(view,0),pos=0);for(let i=pos;i<blockLen;i++)buffer[i]=0;!function setBigUint64(view,byteOffset,value,isLE){if("function"==typeof view.setBigUint64)return view.setBigUint64(byteOffset,value,isLE);const _32n=BigInt(32),_u32_max=BigInt(4294967295),wh=Number(value>>_32n&_u32_max),wl=Number(value&_u32_max),h=isLE?4:0,l=isLE?0:4;view.setUint32(byteOffset+h,wh,isLE),view.setUint32(byteOffset+l,wl,isLE)}(view,blockLen-8,BigInt(8*this.length),isLE),this.process(view,0);const oview=(0,utils.GL)(out),len=this.outputLen;if(len%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const outLen=len/4,state=this.get();if(outLen>state.length)throw new Error("_sha2: outputLen bigger than state");for(let i=0;i<outLen;i++)oview.setUint32(4*i,state[i],isLE)}digest(){const{buffer,outputLen}=this;this.digestInto(buffer);const res=buffer.slice(0,outputLen);return this.destroy(),res}_cloneInto(to){to||(to=new this.constructor),to.set(...this.get());const{blockLen,buffer,length,finished,destroyed,pos}=this;return to.length=length,to.pos=pos,to.finished=finished,to.destroyed=destroyed,length%blockLen&&to.buffer.set(buffer),to}}const Maj=(a,b,c)=>a&b^a&c^b&c,SHA256_K=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),IV=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),SHA256_W=new Uint32Array(64);class SHA256 extends SHA2{constructor(){super(64,32,8,!1),this.A=0|IV[0],this.B=0|IV[1],this.C=0|IV[2],this.D=0|IV[3],this.E=0|IV[4],this.F=0|IV[5],this.G=0|IV[6],this.H=0|IV[7]}get(){const{A,B,C,D,E,F,G,H}=this;return[A,B,C,D,E,F,G,H]}set(A,B,C,D,E,F,G,H){this.A=0|A,this.B=0|B,this.C=0|C,this.D=0|D,this.E=0|E,this.F=0|F,this.G=0|G,this.H=0|H}process(view,offset){for(let i=0;i<16;i++,offset+=4)SHA256_W[i]=view.getUint32(offset,!1);for(let i=16;i<64;i++){const W15=SHA256_W[i-15],W2=SHA256_W[i-2],s0=(0,utils.np)(W15,7)^(0,utils.np)(W15,18)^W15>>>3,s1=(0,utils.np)(W2,17)^(0,utils.np)(W2,19)^W2>>>10;SHA256_W[i]=s1+SHA256_W[i-7]+s0+SHA256_W[i-16]|0}let{A,B,C,D,E,F,G,H}=this;for(let i=0;i<64;i++){const T1=H+((0,utils.np)(E,6)^(0,utils.np)(E,11)^(0,utils.np)(E,25))+((a=E)&F^~a&G)+SHA256_K[i]+SHA256_W[i]|0,T2=((0,utils.np)(A,2)^(0,utils.np)(A,13)^(0,utils.np)(A,22))+Maj(A,B,C)|0;H=G,G=F,F=E,E=D+T1|0,D=C,C=B,B=A,A=T1+T2|0}var a;A=A+this.A|0,B=B+this.B|0,C=C+this.C|0,D=D+this.D|0,E=E+this.E|0,F=F+this.F|0,G=G+this.G|0,H=H+this.H|0,this.set(A,B,C,D,E,F,G,H)}roundClean(){SHA256_W.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}class SHA224 extends SHA256{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}const sha256=(0,utils.hE)((()=>new SHA256));(0,utils.hE)((()=>new SHA224));var abstract_utils=__webpack_require__("./node_modules/.pnpm/@noble+curves@1.0.0/node_modules/@noble/curves/esm/abstract/utils.js");const _0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2),_3n=BigInt(3),_4n=BigInt(4),_5n=BigInt(5),_8n=BigInt(8);BigInt(9),BigInt(16);function mod(a,b){const result=a%b;return result>=_0n?result:b+result}function pow(num,power,modulo){if(modulo<=_0n||power<_0n)throw new Error("Expected power/modulo > 0");if(modulo===_1n)return _0n;let res=_1n;for(;power>_0n;)power&_1n&&(res=res*num%modulo),num=num*num%modulo,power>>=_1n;return res}function pow2(x,power,modulo){let res=x;for(;power-- >_0n;)res*=res,res%=modulo;return res}function invert(number,modulo){if(number===_0n||modulo<=_0n)throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);let a=mod(number,modulo),b=modulo,x=_0n,y=_1n,u=_1n,v=_0n;for(;a!==_0n;){const q=b/a,r=b%a,m=x-u*q,n=y-v*q;b=a,a=r,x=u,y=v,u=m,v=n}if(b!==_1n)throw new Error("invert: does not exist");return mod(x,modulo)}function FpSqrt(P){if(P%_4n===_3n){const p1div4=(P+_1n)/_4n;return function sqrt3mod4(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}if(P%_8n===_5n){const c1=(P-_5n)/_8n;return function sqrt5mod8(Fp,n){const n2=Fp.mul(n,_2n),v=Fp.pow(n2,c1),nv=Fp.mul(n,v),i=Fp.mul(Fp.mul(nv,_2n),v),root=Fp.mul(nv,Fp.sub(i,Fp.ONE));if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}return function tonelliShanks(P){const legendreC=(P-_1n)/_2n;let Q,S,Z;for(Q=P-_1n,S=0;Q%_2n===_0n;Q/=_2n,S++);for(Z=_2n;Z<P&&pow(Z,legendreC,P)!==P-_1n;Z++);if(1===S){const p1div4=(P+_1n)/_4n;return function tonelliFast(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}const Q1div2=(Q+_1n)/_2n;return function tonelliSlow(Fp,n){if(Fp.pow(n,legendreC)===Fp.neg(Fp.ONE))throw new Error("Cannot find square root");let r=S,g=Fp.pow(Fp.mul(Fp.ONE,Z),Q),x=Fp.pow(n,Q1div2),b=Fp.pow(n,Q);for(;!Fp.eql(b,Fp.ONE);){if(Fp.eql(b,Fp.ZERO))return Fp.ZERO;let m=1;for(let t2=Fp.sqr(b);m<r&&!Fp.eql(t2,Fp.ONE);m++)t2=Fp.sqr(t2);const ge=Fp.pow(g,_1n<<BigInt(r-m-1));g=Fp.sqr(ge),x=Fp.mul(x,ge),b=Fp.mul(b,g),r=m}return x}}(P)}const FIELD_FIELDS=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function validateField(field){const opts=FIELD_FIELDS.reduce(((map,val)=>(map[val]="function",map)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"});return(0,abstract_utils.FF)(field,opts)}function nLength(n,nBitLength){const _nBitLength=void 0!==nBitLength?nBitLength:n.toString(2).length;return{nBitLength:_nBitLength,nByteLength:Math.ceil(_nBitLength/8)}}const curve_0n=BigInt(0),curve_1n=BigInt(1);function validateBasic(curve){return validateField(curve.Fp),(0,abstract_utils.FF)(curve,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...nLength(curve.n,curve.nBitLength),...curve,p:curve.Fp.ORDER})}const{bytesToNumberBE:b2n,hexToBytes:h2b}=abstract_utils,DER={Err:class DERErr extends Error{constructor(m=""){super(m)}},_parseInt(data){const{Err:E}=DER;if(data.length<2||2!==data[0])throw new E("Invalid signature integer tag");const len=data[1],res=data.subarray(2,len+2);if(!len||res.length!==len)throw new E("Invalid signature integer: wrong length");if(128&res[0])throw new E("Invalid signature integer: negative");if(0===res[0]&&!(128&res[1]))throw new E("Invalid signature integer: unnecessary leading zero");return{d:b2n(res),l:data.subarray(len+2)}},toSig(hex){const{Err:E}=DER,data="string"==typeof hex?h2b(hex):hex;if(!(data instanceof Uint8Array))throw new Error("ui8a expected");let l=data.length;if(l<2||48!=data[0])throw new E("Invalid signature tag");if(data[1]!==l-2)throw new E("Invalid signature: incorrect length");const{d:r,l:sBytes}=DER._parseInt(data.subarray(2)),{d:s,l:rBytesLeft}=DER._parseInt(sBytes);if(rBytesLeft.length)throw new E("Invalid signature: left bytes after parsing");return{r,s}},hexFromSig(sig){const slice=s=>8&Number.parseInt(s[0],16)?"00"+s:s,h=num=>{const hex=num.toString(16);return 1&hex.length?`0${hex}`:hex},s=slice(h(sig.s)),r=slice(h(sig.r)),shl=s.length/2,rhl=r.length/2,sl=h(shl),rl=h(rhl);return`30${h(rhl+shl+4)}02${rl}${r}02${sl}${s}`}},weierstrass_0n=BigInt(0),weierstrass_1n=BigInt(1),weierstrass_2n=BigInt(2),weierstrass_3n=BigInt(3),weierstrass_4n=BigInt(4);function weierstrassPoints(opts){const CURVE=function validatePointOpts(curve){const opts=validateBasic(curve);abstract_utils.FF(opts,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo,Fp,a}=opts;if(endo){if(!Fp.eql(a,Fp.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof endo||"bigint"!=typeof endo.beta||"function"!=typeof endo.splitScalar)throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...opts})}(opts),{Fp}=CURVE,toBytes=CURVE.toBytes||((c,point,isCompressed)=>{const a=point.toAffine();return abstract_utils.eV(Uint8Array.from([4]),Fp.toBytes(a.x),Fp.toBytes(a.y))}),fromBytes=CURVE.fromBytes||(bytes=>{const tail=bytes.subarray(1);return{x:Fp.fromBytes(tail.subarray(0,Fp.BYTES)),y:Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES))}});function weierstrassEquation(x){const{a,b}=CURVE,x2=Fp.sqr(x),x3=Fp.mul(x2,x);return Fp.add(Fp.add(x3,Fp.mul(x,a)),b)}if(!Fp.eql(Fp.sqr(CURVE.Gy),weierstrassEquation(CURVE.Gx)))throw new Error("bad generator point: equation left != right");function isWithinCurveOrder(num){return"bigint"==typeof num&&weierstrass_0n<num&&num<CURVE.n}function assertGE(num){if(!isWithinCurveOrder(num))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function normPrivateKeyToScalar(key){const{allowedPrivateKeyLengths:lengths,nByteLength,wrapPrivateKey,n}=CURVE;if(lengths&&"bigint"!=typeof key){if(key instanceof Uint8Array&&(key=abstract_utils.ci(key)),"string"!=typeof key||!lengths.includes(key.length))throw new Error("Invalid key");key=key.padStart(2*nByteLength,"0")}let num;try{num="bigint"==typeof key?key:abstract_utils.bytesToNumberBE((0,abstract_utils.ql)("private key",key,nByteLength))}catch(error){throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`)}return wrapPrivateKey&&(num=mod(num,n)),assertGE(num),num}const pointPrecomputes=new Map;function assertPrjPoint(other){if(!(other instanceof Point))throw new Error("ProjectivePoint expected")}class Point{constructor(px,py,pz){if(this.px=px,this.py=py,this.pz=pz,null==px||!Fp.isValid(px))throw new Error("x required");if(null==py||!Fp.isValid(py))throw new Error("y required");if(null==pz||!Fp.isValid(pz))throw new Error("z required")}static fromAffine(p){const{x,y}=p||{};if(!p||!Fp.isValid(x)||!Fp.isValid(y))throw new Error("invalid affine point");if(p instanceof Point)throw new Error("projective point not allowed");const is0=i=>Fp.eql(i,Fp.ZERO);return is0(x)&&is0(y)?Point.ZERO:new Point(x,y,Fp.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(points){const toInv=Fp.invertBatch(points.map((p=>p.pz)));return points.map(((p,i)=>p.toAffine(toInv[i]))).map(Point.fromAffine)}static fromHex(hex){const P=Point.fromAffine(fromBytes((0,abstract_utils.ql)("pointHex",hex)));return P.assertValidity(),P}static fromPrivateKey(privateKey){return Point.BASE.multiply(normPrivateKeyToScalar(privateKey))}_setWindowSize(windowSize){this._WINDOW_SIZE=windowSize,pointPrecomputes.delete(this)}assertValidity(){if(this.is0()){if(CURVE.allowInfinityPoint)return;throw new Error("bad point: ZERO")}const{x,y}=this.toAffine();if(!Fp.isValid(x)||!Fp.isValid(y))throw new Error("bad point: x or y not FE");const left=Fp.sqr(y),right=weierstrassEquation(x);if(!Fp.eql(left,right))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y}=this.toAffine();if(Fp.isOdd)return!Fp.isOdd(y);throw new Error("Field doesn't support isOdd")}equals(other){assertPrjPoint(other);const{px:X1,py:Y1,pz:Z1}=this,{px:X2,py:Y2,pz:Z2}=other,U1=Fp.eql(Fp.mul(X1,Z2),Fp.mul(X2,Z1)),U2=Fp.eql(Fp.mul(Y1,Z2),Fp.mul(Y2,Z1));return U1&&U2}negate(){return new Point(this.px,Fp.neg(this.py),this.pz)}double(){const{a,b}=CURVE,b3=Fp.mul(b,weierstrass_3n),{px:X1,py:Y1,pz:Z1}=this;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO,t0=Fp.mul(X1,X1),t1=Fp.mul(Y1,Y1),t2=Fp.mul(Z1,Z1),t3=Fp.mul(X1,Y1);return t3=Fp.add(t3,t3),Z3=Fp.mul(X1,Z1),Z3=Fp.add(Z3,Z3),X3=Fp.mul(a,Z3),Y3=Fp.mul(b3,t2),Y3=Fp.add(X3,Y3),X3=Fp.sub(t1,Y3),Y3=Fp.add(t1,Y3),Y3=Fp.mul(X3,Y3),X3=Fp.mul(t3,X3),Z3=Fp.mul(b3,Z3),t2=Fp.mul(a,t2),t3=Fp.sub(t0,t2),t3=Fp.mul(a,t3),t3=Fp.add(t3,Z3),Z3=Fp.add(t0,t0),t0=Fp.add(Z3,t0),t0=Fp.add(t0,t2),t0=Fp.mul(t0,t3),Y3=Fp.add(Y3,t0),t2=Fp.mul(Y1,Z1),t2=Fp.add(t2,t2),t0=Fp.mul(t2,t3),X3=Fp.sub(X3,t0),Z3=Fp.mul(t2,t1),Z3=Fp.add(Z3,Z3),Z3=Fp.add(Z3,Z3),new Point(X3,Y3,Z3)}add(other){assertPrjPoint(other);const{px:X1,py:Y1,pz:Z1}=this,{px:X2,py:Y2,pz:Z2}=other;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO;const a=CURVE.a,b3=Fp.mul(CURVE.b,weierstrass_3n);let t0=Fp.mul(X1,X2),t1=Fp.mul(Y1,Y2),t2=Fp.mul(Z1,Z2),t3=Fp.add(X1,Y1),t4=Fp.add(X2,Y2);t3=Fp.mul(t3,t4),t4=Fp.add(t0,t1),t3=Fp.sub(t3,t4),t4=Fp.add(X1,Z1);let t5=Fp.add(X2,Z2);return t4=Fp.mul(t4,t5),t5=Fp.add(t0,t2),t4=Fp.sub(t4,t5),t5=Fp.add(Y1,Z1),X3=Fp.add(Y2,Z2),t5=Fp.mul(t5,X3),X3=Fp.add(t1,t2),t5=Fp.sub(t5,X3),Z3=Fp.mul(a,t4),X3=Fp.mul(b3,t2),Z3=Fp.add(X3,Z3),X3=Fp.sub(t1,Z3),Z3=Fp.add(t1,Z3),Y3=Fp.mul(X3,Z3),t1=Fp.add(t0,t0),t1=Fp.add(t1,t0),t2=Fp.mul(a,t2),t4=Fp.mul(b3,t4),t1=Fp.add(t1,t2),t2=Fp.sub(t0,t2),t2=Fp.mul(a,t2),t4=Fp.add(t4,t2),t0=Fp.mul(t1,t4),Y3=Fp.add(Y3,t0),t0=Fp.mul(t5,t4),X3=Fp.mul(t3,X3),X3=Fp.sub(X3,t0),t0=Fp.mul(t3,t1),Z3=Fp.mul(t5,Z3),Z3=Fp.add(Z3,t0),new Point(X3,Y3,Z3)}subtract(other){return this.add(other.negate())}is0(){return this.equals(Point.ZERO)}wNAF(n){return wnaf.wNAFCached(this,pointPrecomputes,n,(comp=>{const toInv=Fp.invertBatch(comp.map((p=>p.pz)));return comp.map(((p,i)=>p.toAffine(toInv[i]))).map(Point.fromAffine)}))}multiplyUnsafe(n){const I=Point.ZERO;if(n===weierstrass_0n)return I;if(assertGE(n),n===weierstrass_1n)return this;const{endo}=CURVE;if(!endo)return wnaf.unsafeLadder(this,n);let{k1neg,k1,k2neg,k2}=endo.splitScalar(n),k1p=I,k2p=I,d=this;for(;k1>weierstrass_0n||k2>weierstrass_0n;)k1&weierstrass_1n&&(k1p=k1p.add(d)),k2&weierstrass_1n&&(k2p=k2p.add(d)),d=d.double(),k1>>=weierstrass_1n,k2>>=weierstrass_1n;return k1neg&&(k1p=k1p.negate()),k2neg&&(k2p=k2p.negate()),k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz),k1p.add(k2p)}multiply(scalar){assertGE(scalar);let point,fake,n=scalar;const{endo}=CURVE;if(endo){const{k1neg,k1,k2neg,k2}=endo.splitScalar(n);let{p:k1p,f:f1p}=this.wNAF(k1),{p:k2p,f:f2p}=this.wNAF(k2);k1p=wnaf.constTimeNegate(k1neg,k1p),k2p=wnaf.constTimeNegate(k2neg,k2p),k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz),point=k1p.add(k2p),fake=f1p.add(f2p)}else{const{p,f}=this.wNAF(n);point=p,fake=f}return Point.normalizeZ([point,fake])[0]}multiplyAndAddUnsafe(Q,a,b){const G=Point.BASE,mul=(P,a)=>a!==weierstrass_0n&&a!==weierstrass_1n&&P.equals(G)?P.multiply(a):P.multiplyUnsafe(a),sum=mul(this,a).add(mul(Q,b));return sum.is0()?void 0:sum}toAffine(iz){const{px:x,py:y,pz:z}=this,is0=this.is0();null==iz&&(iz=is0?Fp.ONE:Fp.inv(z));const ax=Fp.mul(x,iz),ay=Fp.mul(y,iz),zz=Fp.mul(z,iz);if(is0)return{x:Fp.ZERO,y:Fp.ZERO};if(!Fp.eql(zz,Fp.ONE))throw new Error("invZ was invalid");return{x:ax,y:ay}}isTorsionFree(){const{h:cofactor,isTorsionFree}=CURVE;if(cofactor===weierstrass_1n)return!0;if(isTorsionFree)return isTorsionFree(Point,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:cofactor,clearCofactor}=CURVE;return cofactor===weierstrass_1n?this:clearCofactor?clearCofactor(Point,this):this.multiplyUnsafe(CURVE.h)}toRawBytes(isCompressed=!0){return this.assertValidity(),toBytes(Point,this,isCompressed)}toHex(isCompressed=!0){return abstract_utils.ci(this.toRawBytes(isCompressed))}}Point.BASE=new Point(CURVE.Gx,CURVE.Gy,Fp.ONE),Point.ZERO=new Point(Fp.ZERO,Fp.ONE,Fp.ZERO);const _bits=CURVE.nBitLength,wnaf=function wNAF(c,bits){const constTimeNegate=(condition,item)=>{const neg=item.negate();return condition?neg:item},opts=W=>({windows:Math.ceil(bits/W)+1,windowSize:2**(W-1)});return{constTimeNegate,unsafeLadder(elm,n){let p=c.ZERO,d=elm;for(;n>curve_0n;)n&curve_1n&&(p=p.add(d)),d=d.double(),n>>=curve_1n;return p},precomputeWindow(elm,W){const{windows,windowSize}=opts(W),points=[];let p=elm,base=p;for(let window=0;window<windows;window++){base=p,points.push(base);for(let i=1;i<windowSize;i++)base=base.add(p),points.push(base);p=base.double()}return points},wNAF(W,precomputes,n){const{windows,windowSize}=opts(W);let p=c.ZERO,f=c.BASE;const mask=BigInt(2**W-1),maxNumber=2**W,shiftBy=BigInt(W);for(let window=0;window<windows;window++){const offset=window*windowSize;let wbits=Number(n&mask);n>>=shiftBy,wbits>windowSize&&(wbits-=maxNumber,n+=curve_1n);const offset1=offset,offset2=offset+Math.abs(wbits)-1,cond1=window%2!=0,cond2=wbits<0;0===wbits?f=f.add(constTimeNegate(cond1,precomputes[offset1])):p=p.add(constTimeNegate(cond2,precomputes[offset2]))}return{p,f}},wNAFCached(P,precomputesMap,n,transform){const W=P._WINDOW_SIZE||1;let comp=precomputesMap.get(P);return comp||(comp=this.precomputeWindow(P,W),1!==W&&precomputesMap.set(P,transform(comp))),this.wNAF(W,comp,n)}}}(Point,CURVE.endo?Math.ceil(_bits/2):_bits);return{CURVE,ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder}}function weierstrass(curveDef){const CURVE=function validateOpts(curve){const opts=validateBasic(curve);return abstract_utils.FF(opts,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...opts})}(curveDef),{Fp,n:CURVE_ORDER}=CURVE,compressedLen=Fp.BYTES+1,uncompressedLen=2*Fp.BYTES+1;function modN(a){return mod(a,CURVE_ORDER)}function invN(a){return invert(a,CURVE_ORDER)}const{ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder}=weierstrassPoints({...CURVE,toBytes(c,point,isCompressed){const a=point.toAffine(),x=Fp.toBytes(a.x),cat=abstract_utils.eV;return isCompressed?cat(Uint8Array.from([point.hasEvenY()?2:3]),x):cat(Uint8Array.from([4]),x,Fp.toBytes(a.y))},fromBytes(bytes){const len=bytes.length,head=bytes[0],tail=bytes.subarray(1);if(len!==compressedLen||2!==head&&3!==head){if(len===uncompressedLen&&4===head){return{x:Fp.fromBytes(tail.subarray(0,Fp.BYTES)),y:Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES))}}throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`)}{const x=abstract_utils.bytesToNumberBE(tail);if(!function isValidFieldElement(num){return weierstrass_0n<num&&num<Fp.ORDER}(x))throw new Error("Point is not on curve");const y2=weierstrassEquation(x);let y=Fp.sqrt(y2);return 1==(1&head)!==((y&weierstrass_1n)===weierstrass_1n)&&(y=Fp.neg(y)),{x,y}}}}),numToNByteStr=num=>abstract_utils.ci(abstract_utils.tL(num,CURVE.nByteLength));function isBiggerThanHalfOrder(number){return number>CURVE_ORDER>>weierstrass_1n}const slcNum=(b,from,to)=>abstract_utils.bytesToNumberBE(b.slice(from,to));class Signature{constructor(r,s,recovery){this.r=r,this.s=s,this.recovery=recovery,this.assertValidity()}static fromCompact(hex){const l=CURVE.nByteLength;return hex=(0,abstract_utils.ql)("compactSignature",hex,2*l),new Signature(slcNum(hex,0,l),slcNum(hex,l,2*l))}static fromDER(hex){const{r,s}=DER.toSig((0,abstract_utils.ql)("DER",hex));return new Signature(r,s)}assertValidity(){if(!isWithinCurveOrder(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!isWithinCurveOrder(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(recovery){return new Signature(this.r,this.s,recovery)}recoverPublicKey(msgHash){const{r,s,recovery:rec}=this,h=bits2int_modN((0,abstract_utils.ql)("msgHash",msgHash));if(null==rec||![0,1,2,3].includes(rec))throw new Error("recovery id invalid");const radj=2===rec||3===rec?r+CURVE.n:r;if(radj>=Fp.ORDER)throw new Error("recovery id 2 or 3 invalid");const prefix=0==(1&rec)?"02":"03",R=Point.fromHex(prefix+numToNByteStr(radj)),ir=invN(radj),u1=modN(-h*ir),u2=modN(s*ir),Q=Point.BASE.multiplyAndAddUnsafe(R,u1,u2);if(!Q)throw new Error("point at infinify");return Q.assertValidity(),Q}hasHighS(){return isBiggerThanHalfOrder(this.s)}normalizeS(){return this.hasHighS()?new Signature(this.r,modN(-this.s),this.recovery):this}toDERRawBytes(){return abstract_utils.hexToBytes(this.toDERHex())}toDERHex(){return DER.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return abstract_utils.hexToBytes(this.toCompactHex())}toCompactHex(){return numToNByteStr(this.r)+numToNByteStr(this.s)}}const utils={isValidPrivateKey(privateKey){try{return normPrivateKeyToScalar(privateKey),!0}catch(error){return!1}},normPrivateKeyToScalar,randomPrivateKey:()=>{const num=function hashToPrivateScalar(hash,groupOrder,isLE=!1){const hashLen=(hash=(0,abstract_utils.ql)("privateHash",hash)).length,minLen=nLength(groupOrder).nByteLength+8;if(minLen<24||hashLen<minLen||hashLen>1024)throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);return mod(isLE?(0,abstract_utils.ty)(hash):(0,abstract_utils.bytesToNumberBE)(hash),groupOrder-_1n)+_1n}(CURVE.randomBytes(Fp.BYTES+8),CURVE_ORDER);return abstract_utils.tL(num,CURVE.nByteLength)},precompute:(windowSize=8,point=Point.BASE)=>(point._setWindowSize(windowSize),point.multiply(BigInt(3)),point)};function isProbPub(item){const arr=item instanceof Uint8Array,str="string"==typeof item,len=(arr||str)&&item.length;return arr?len===compressedLen||len===uncompressedLen:str?len===2*compressedLen||len===2*uncompressedLen:item instanceof Point}const bits2int=CURVE.bits2int||function(bytes){const num=abstract_utils.bytesToNumberBE(bytes),delta=8*bytes.length-CURVE.nBitLength;return delta>0?num>>BigInt(delta):num},bits2int_modN=CURVE.bits2int_modN||function(bytes){return modN(bits2int(bytes))},ORDER_MASK=abstract_utils.dQ(CURVE.nBitLength);function int2octets(num){if("bigint"!=typeof num)throw new Error("bigint expected");if(!(weierstrass_0n<=num&&num<ORDER_MASK))throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);return abstract_utils.tL(num,CURVE.nByteLength)}function prepSig(msgHash,privateKey,opts=defaultSigOpts){if(["recovered","canonical"].some((k=>k in opts)))throw new Error("sign() legacy options not supported");const{hash,randomBytes}=CURVE;let{lowS,prehash,extraEntropy:ent}=opts;null==lowS&&(lowS=!0),msgHash=(0,abstract_utils.ql)("msgHash",msgHash),prehash&&(msgHash=(0,abstract_utils.ql)("prehashed msgHash",hash(msgHash)));const h1int=bits2int_modN(msgHash),d=normPrivateKeyToScalar(privateKey),seedArgs=[int2octets(d),int2octets(h1int)];if(null!=ent){const e=!0===ent?randomBytes(Fp.BYTES):ent;seedArgs.push((0,abstract_utils.ql)("extraEntropy",e,Fp.BYTES))}const seed=abstract_utils.eV(...seedArgs),m=h1int;return{seed,k2sig:function k2sig(kBytes){const k=bits2int(kBytes);if(!isWithinCurveOrder(k))return;const ik=invN(k),q=Point.BASE.multiply(k).toAffine(),r=modN(q.x);if(r===weierstrass_0n)return;const s=modN(ik*modN(m+r*d));if(s===weierstrass_0n)return;let recovery=(q.x===r?0:2)|Number(q.y&weierstrass_1n),normS=s;return lowS&&isBiggerThanHalfOrder(s)&&(normS=function normalizeS(s){return isBiggerThanHalfOrder(s)?modN(-s):s}(s),recovery^=1),new Signature(r,normS,recovery)}}}const defaultSigOpts={lowS:CURVE.lowS,prehash:!1},defaultVerOpts={lowS:CURVE.lowS,prehash:!1};return Point.BASE._setWindowSize(8),{CURVE,getPublicKey:function getPublicKey(privateKey,isCompressed=!0){return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed)},getSharedSecret:function getSharedSecret(privateA,publicB,isCompressed=!0){if(isProbPub(privateA))throw new Error("first arg must be private key");if(!isProbPub(publicB))throw new Error("second arg must be public key");return Point.fromHex(publicB).multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed)},sign:function sign(msgHash,privKey,opts=defaultSigOpts){const{seed,k2sig}=prepSig(msgHash,privKey,opts);return abstract_utils.n$(CURVE.hash.outputLen,CURVE.nByteLength,CURVE.hmac)(seed,k2sig)},verify:function verify(signature,msgHash,publicKey,opts=defaultVerOpts){const sg=signature;if(msgHash=(0,abstract_utils.ql)("msgHash",msgHash),publicKey=(0,abstract_utils.ql)("publicKey",publicKey),"strict"in opts)throw new Error("options.strict was renamed to lowS");const{lowS,prehash}=opts;let _sig,P;try{if("string"==typeof sg||sg instanceof Uint8Array)try{_sig=Signature.fromDER(sg)}catch(derError){if(!(derError instanceof DER.Err))throw derError;_sig=Signature.fromCompact(sg)}else{if("object"!=typeof sg||"bigint"!=typeof sg.r||"bigint"!=typeof sg.s)throw new Error("PARSE");{const{r,s}=sg;_sig=new Signature(r,s)}}P=Point.fromHex(publicKey)}catch(error){if("PARSE"===error.message)throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(lowS&&_sig.hasHighS())return!1;prehash&&(msgHash=CURVE.hash(msgHash));const{r,s}=_sig,h=bits2int_modN(msgHash),is=invN(s),u1=modN(h*is),u2=modN(r*is),R=Point.BASE.multiplyAndAddUnsafe(P,u1,u2)?.toAffine();return!!R&&modN(R.x)===r},ProjectivePoint:Point,Signature,utils}}const os2ip=abstract_utils.bytesToNumberBE;function i2osp(value,length){if(value<0||value>=1<<8*length)throw new Error(`bad I2OSP call: value=${value} length=${length}`);const res=Array.from({length}).fill(0);for(let i=length-1;i>=0;i--)res[i]=255&value,value>>>=8;return new Uint8Array(res)}function strxor(a,b){const arr=new Uint8Array(a.length);for(let i=0;i<a.length;i++)arr[i]=a[i]^b[i];return arr}function isBytes(item){if(!(item instanceof Uint8Array))throw new Error("Uint8Array expected")}function isNum(item){if(!Number.isSafeInteger(item))throw new Error("number expected")}function hash_to_field(msg,count,options){(0,abstract_utils.FF)(options,{DST:"string",p:"bigint",m:"isSafeInteger",k:"isSafeInteger",hash:"hash"});const{p,k,m,hash,expand,DST:_DST}=options;isBytes(msg),isNum(count);const DST=function validateDST(dst){if(dst instanceof Uint8Array)return dst;if("string"==typeof dst)return(0,abstract_utils.iY)(dst);throw new Error("DST must be Uint8Array or string")}(_DST),log2p=p.toString(2).length,L=Math.ceil((log2p+k)/8),len_in_bytes=count*m*L;let prb;if("xmd"===expand)prb=function expand_message_xmd(msg,DST,lenInBytes,H){isBytes(msg),isBytes(DST),isNum(lenInBytes),DST.length>255&&(DST=H((0,abstract_utils.eV)((0,abstract_utils.iY)("H2C-OVERSIZE-DST-"),DST)));const{outputLen:b_in_bytes,blockLen:r_in_bytes}=H,ell=Math.ceil(lenInBytes/b_in_bytes);if(ell>255)throw new Error("Invalid xmd length");const DST_prime=(0,abstract_utils.eV)(DST,i2osp(DST.length,1)),Z_pad=i2osp(0,r_in_bytes),l_i_b_str=i2osp(lenInBytes,2),b=new Array(ell),b_0=H((0,abstract_utils.eV)(Z_pad,msg,l_i_b_str,i2osp(0,1),DST_prime));b[0]=H((0,abstract_utils.eV)(b_0,i2osp(1,1),DST_prime));for(let i=1;i<=ell;i++){const args=[strxor(b_0,b[i-1]),i2osp(i+1,1),DST_prime];b[i]=H((0,abstract_utils.eV)(...args))}return(0,abstract_utils.eV)(...b).slice(0,lenInBytes)}(msg,DST,len_in_bytes,hash);else if("xof"===expand)prb=function expand_message_xof(msg,DST,lenInBytes,k,H){if(isBytes(msg),isBytes(DST),isNum(lenInBytes),DST.length>255){const dkLen=Math.ceil(2*k/8);DST=H.create({dkLen}).update((0,abstract_utils.iY)("H2C-OVERSIZE-DST-")).update(DST).digest()}if(lenInBytes>65535||DST.length>255)throw new Error("expand_message_xof: invalid lenInBytes");return H.create({dkLen:lenInBytes}).update(msg).update(i2osp(lenInBytes,2)).update(DST).update(i2osp(DST.length,1)).digest()}(msg,DST,len_in_bytes,k,hash);else{if("_internal_pass"!==expand)throw new Error('expand must be "xmd" or "xof"');prb=msg}const u=new Array(count);for(let i=0;i<count;i++){const e=new Array(m);for(let j=0;j<m;j++){const elm_offset=L*(j+i*m),tv=prb.subarray(elm_offset,elm_offset+L);e[j]=mod(os2ip(tv),p)}u[i]=e}return u}class HMAC extends utils.kb{constructor(hash,_key){super(),this.finished=!1,this.destroyed=!1,_assert.ZP.hash(hash);const key=(0,utils.O0)(_key);if(this.iHash=hash.create(),"function"!=typeof this.iHash.update)throw new TypeError("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const blockLen=this.blockLen,pad=new Uint8Array(blockLen);pad.set(key.length>blockLen?hash.create().update(key).digest():key);for(let i=0;i<pad.length;i++)pad[i]^=54;this.iHash.update(pad),this.oHash=hash.create();for(let i=0;i<pad.length;i++)pad[i]^=106;this.oHash.update(pad),pad.fill(0)}update(buf){return _assert.ZP.exists(this),this.iHash.update(buf),this}digestInto(out){_assert.ZP.exists(this),_assert.ZP.bytes(out,this.outputLen),this.finished=!0,this.iHash.digestInto(out),this.oHash.update(out),this.oHash.digestInto(out),this.destroy()}digest(){const out=new Uint8Array(this.oHash.outputLen);return this.digestInto(out),out}_cloneInto(to){to||(to=Object.create(Object.getPrototypeOf(this),{}));const{oHash,iHash,finished,destroyed,blockLen,outputLen}=this;return to.finished=finished,to.destroyed=destroyed,to.blockLen=blockLen,to.outputLen=outputLen,to.oHash=oHash._cloneInto(to.oHash),to.iHash=iHash._cloneInto(to.iHash),to}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const hmac=(hash,key,message)=>new HMAC(hash,key).update(message).digest();function getHash(hash){return{hash,hmac:(key,...msgs)=>hmac(hash,key,(0,utils.eV)(...msgs)),randomBytes:utils.O6}}hmac.create=(hash,key)=>new HMAC(hash,key);const secp256k1P=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),secp256k1N=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),secp256k1_1n=BigInt(1),secp256k1_2n=BigInt(2),divNearest=(a,b)=>(a+b/secp256k1_2n)/b;function sqrtMod(y){const P=secp256k1P,_3n=BigInt(3),_6n=BigInt(6),_11n=BigInt(11),_22n=BigInt(22),_23n=BigInt(23),_44n=BigInt(44),_88n=BigInt(88),b2=y*y*y%P,b3=b2*b2*y%P,b6=pow2(b3,_3n,P)*b3%P,b9=pow2(b6,_3n,P)*b3%P,b11=pow2(b9,secp256k1_2n,P)*b2%P,b22=pow2(b11,_11n,P)*b11%P,b44=pow2(b22,_22n,P)*b22%P,b88=pow2(b44,_44n,P)*b44%P,b176=pow2(b88,_88n,P)*b88%P,b220=pow2(b176,_44n,P)*b44%P,b223=pow2(b220,_3n,P)*b3%P,t1=pow2(b223,_23n,P)*b22%P,t2=pow2(t1,_6n,P)*b2%P,root=pow2(t2,secp256k1_2n,P);if(!Fp.eql(Fp.sqr(root),y))throw new Error("Cannot find square root");return root}const Fp=function Field(ORDER,bitLen,isLE=!1,redef={}){if(ORDER<=_0n)throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);const{nBitLength:BITS,nByteLength:BYTES}=nLength(ORDER,bitLen);if(BYTES>2048)throw new Error("Field lengths over 2048 bytes are not supported");const sqrtP=FpSqrt(ORDER),f=Object.freeze({ORDER,BITS,BYTES,MASK:(0,abstract_utils.dQ)(BITS),ZERO:_0n,ONE:_1n,create:num=>mod(num,ORDER),isValid:num=>{if("bigint"!=typeof num)throw new Error("Invalid field element: expected bigint, got "+typeof num);return _0n<=num&&num<ORDER},is0:num=>num===_0n,isOdd:num=>(num&_1n)===_1n,neg:num=>mod(-num,ORDER),eql:(lhs,rhs)=>lhs===rhs,sqr:num=>mod(num*num,ORDER),add:(lhs,rhs)=>mod(lhs+rhs,ORDER),sub:(lhs,rhs)=>mod(lhs-rhs,ORDER),mul:(lhs,rhs)=>mod(lhs*rhs,ORDER),pow:(num,power)=>function FpPow(f,num,power){if(power<_0n)throw new Error("Expected power > 0");if(power===_0n)return f.ONE;if(power===_1n)return num;let p=f.ONE,d=num;for(;power>_0n;)power&_1n&&(p=f.mul(p,d)),d=f.sqr(d),power>>=_1n;return p}(f,num,power),div:(lhs,rhs)=>mod(lhs*invert(rhs,ORDER),ORDER),sqrN:num=>num*num,addN:(lhs,rhs)=>lhs+rhs,subN:(lhs,rhs)=>lhs-rhs,mulN:(lhs,rhs)=>lhs*rhs,inv:num=>invert(num,ORDER),sqrt:redef.sqrt||(n=>sqrtP(f,n)),invertBatch:lst=>function FpInvertBatch(f,nums){const tmp=new Array(nums.length),lastMultiplied=nums.reduce(((acc,num,i)=>f.is0(num)?acc:(tmp[i]=acc,f.mul(acc,num))),f.ONE),inverted=f.inv(lastMultiplied);return nums.reduceRight(((acc,num,i)=>f.is0(num)?acc:(tmp[i]=f.mul(acc,tmp[i]),f.mul(acc,num))),inverted),tmp}(f,lst),cmov:(a,b,c)=>c?b:a,toBytes:num=>isLE?(0,abstract_utils.S5)(num,BYTES):(0,abstract_utils.tL)(num,BYTES),fromBytes:bytes=>{if(bytes.length!==BYTES)throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);return isLE?(0,abstract_utils.ty)(bytes):(0,abstract_utils.bytesToNumberBE)(bytes)}});return Object.freeze(f)}(secp256k1P,void 0,void 0,{sqrt:sqrtMod}),secp256k1=function createCurve(curveDef,defHash){const create=hash=>weierstrass({...curveDef,...getHash(hash)});return Object.freeze({...create(defHash),create})}({a:BigInt(0),b:BigInt(7),Fp,n:secp256k1N,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:k=>{const n=secp256k1N,a1=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),b1=-secp256k1_1n*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),a2=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),b2=a1,POW_2_128=BigInt("0x100000000000000000000000000000000"),c1=divNearest(b2*k,n),c2=divNearest(-b1*k,n);let k1=mod(k-c1*a1-c2*a2,n),k2=mod(-c1*b1-c2*b2,n);const k1neg=k1>POW_2_128,k2neg=k2>POW_2_128;if(k1neg&&(k1=n-k1),k2neg&&(k2=n-k2),k1>POW_2_128||k2>POW_2_128)throw new Error("splitScalar: Endomorphism failed, k="+k);return{k1neg,k1,k2neg,k2}}}},sha256),secp256k1_0n=BigInt(0),fe=x=>"bigint"==typeof x&&secp256k1_0n<x&&x<secp256k1P,TAGGED_HASH_PREFIXES={};function taggedHash(tag,...messages){let tagP=TAGGED_HASH_PREFIXES[tag];if(void 0===tagP){const tagH=sha256(Uint8Array.from(tag,(c=>c.charCodeAt(0))));tagP=(0,abstract_utils.eV)(tagH,tagH),TAGGED_HASH_PREFIXES[tag]=tagP}return sha256((0,abstract_utils.eV)(tagP,...messages))}const pointToBytes=point=>point.toRawBytes(!0).slice(1),modP=x=>mod(x,secp256k1P),Point=secp256k1.ProjectivePoint;function lift_x(x){if(!fe(x))throw new Error("bad x: need 0 < x < p");const xx=modP(x*x);let y=sqrtMod(modP(xx*x+BigInt(7)));y%secp256k1_2n!==secp256k1_0n&&(y=modP(-y));const p=new Point(x,y,secp256k1_1n);return p.assertValidity(),p}secp256k1.utils.randomPrivateKey,abstract_utils.tL,abstract_utils.bytesToNumberBE;const isoMap=function isogenyMap(field,map){const COEFF=map.map((i=>Array.from(i).reverse()));return(x,y)=>{const[xNum,xDen,yNum,yDen]=COEFF.map((val=>val.reduce(((acc,i)=>field.add(field.mul(acc,x),i)))));return x=field.div(xNum,xDen),y=field.mul(y,field.div(yNum,yDen)),{x,y}}}(Fp,[["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map((i=>i.map((j=>BigInt(j)))))),mapSWU=function mapToCurveSimpleSWU(Fp,opts){if(validateField(Fp),!Fp.isValid(opts.A)||!Fp.isValid(opts.B)||!Fp.isValid(opts.Z))throw new Error("mapToCurveSimpleSWU: invalid opts");const sqrtRatio=function SWUFpSqrtRatio(Fp,Z){const q=Fp.ORDER;let l=weierstrass_0n;for(let o=q-weierstrass_1n;o%weierstrass_2n===weierstrass_0n;o/=weierstrass_2n)l+=weierstrass_1n;const c1=l,c2=(q-weierstrass_1n)/weierstrass_2n**c1,c3=(c2-weierstrass_1n)/weierstrass_2n,c4=weierstrass_2n**c1-weierstrass_1n,c5=weierstrass_2n**(c1-weierstrass_1n),c6=Fp.pow(Z,c2),c7=Fp.pow(Z,(c2+weierstrass_1n)/weierstrass_2n);let sqrtRatio=(u,v)=>{let tv1=c6,tv2=Fp.pow(v,c4),tv3=Fp.sqr(tv2);tv3=Fp.mul(tv3,v);let tv5=Fp.mul(u,tv3);tv5=Fp.pow(tv5,c3),tv5=Fp.mul(tv5,tv2),tv2=Fp.mul(tv5,v),tv3=Fp.mul(tv5,u);let tv4=Fp.mul(tv3,tv2);tv5=Fp.pow(tv4,c5);let isQR=Fp.eql(tv5,Fp.ONE);tv2=Fp.mul(tv3,c7),tv5=Fp.mul(tv4,tv1),tv3=Fp.cmov(tv2,tv3,isQR),tv4=Fp.cmov(tv5,tv4,isQR);for(let i=c1;i>weierstrass_1n;i--){let tv5=weierstrass_2n**(i-weierstrass_2n),tvv5=Fp.pow(tv4,tv5);const e1=Fp.eql(tvv5,Fp.ONE);tv2=Fp.mul(tv3,tv1),tv1=Fp.mul(tv1,tv1),tvv5=Fp.mul(tv4,tv1),tv3=Fp.cmov(tv2,tv3,e1),tv4=Fp.cmov(tvv5,tv4,e1)}return{isValid:isQR,value:tv3}};if(Fp.ORDER%weierstrass_4n===weierstrass_3n){const c1=(Fp.ORDER-weierstrass_3n)/weierstrass_4n,c2=Fp.sqrt(Fp.neg(Z));sqrtRatio=(u,v)=>{let tv1=Fp.sqr(v);const tv2=Fp.mul(u,v);tv1=Fp.mul(tv1,tv2);let y1=Fp.pow(tv1,c1);y1=Fp.mul(y1,tv2);const y2=Fp.mul(y1,c2),tv3=Fp.mul(Fp.sqr(y1),v),isQR=Fp.eql(tv3,u);return{isValid:isQR,value:Fp.cmov(y2,y1,isQR)}}}return sqrtRatio}(Fp,opts.Z);if(!Fp.isOdd)throw new Error("Fp.isOdd is not implemented!");return u=>{let tv1,tv2,tv3,tv4,tv5,tv6,x,y;tv1=Fp.sqr(u),tv1=Fp.mul(tv1,opts.Z),tv2=Fp.sqr(tv1),tv2=Fp.add(tv2,tv1),tv3=Fp.add(tv2,Fp.ONE),tv3=Fp.mul(tv3,opts.B),tv4=Fp.cmov(opts.Z,Fp.neg(tv2),!Fp.eql(tv2,Fp.ZERO)),tv4=Fp.mul(tv4,opts.A),tv2=Fp.sqr(tv3),tv6=Fp.sqr(tv4),tv5=Fp.mul(tv6,opts.A),tv2=Fp.add(tv2,tv5),tv2=Fp.mul(tv2,tv3),tv6=Fp.mul(tv6,tv4),tv5=Fp.mul(tv6,opts.B),tv2=Fp.add(tv2,tv5),x=Fp.mul(tv1,tv3);const{isValid,value}=sqrtRatio(tv2,tv6);y=Fp.mul(tv1,u),y=Fp.mul(y,value),x=Fp.cmov(x,tv3,isValid),y=Fp.cmov(y,value,isValid);const e1=Fp.isOdd(u)===Fp.isOdd(y);return y=Fp.cmov(Fp.neg(y),y,e1),x=Fp.div(x,tv4),{x,y}}}(Fp,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:Fp.create(BigInt("-11"))}),{hashToCurve,encodeToCurve}=function createHasher(Point,mapToCurve,def){if("function"!=typeof mapToCurve)throw new Error("mapToCurve() must be defined");return{hashToCurve(msg,options){const u=hash_to_field(msg,2,{...def,DST:def.DST,...options}),u0=Point.fromAffine(mapToCurve(u[0])),u1=Point.fromAffine(mapToCurve(u[1])),P=u0.add(u1).clearCofactor();return P.assertValidity(),P},encodeToCurve(msg,options){const u=hash_to_field(msg,1,{...def,DST:def.encodeDST,...options}),P=Point.fromAffine(mapToCurve(u[0])).clearCofactor();return P.assertValidity(),P}}}(secp256k1.ProjectivePoint,(scalars=>{const{x,y}=mapSWU(Fp.create(scalars[0]));return isoMap(x,y)}),{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:Fp.ORDER,m:1,k:128,expand:"xmd",hash:sha256})}}]);